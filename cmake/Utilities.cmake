############################################################################################
## Run Git and parse the output to populate version settings above
FUNCTION (GetAndParseVersion)

SET(PACKAGE_VERSION "0.0.0-0-g000000" PARENT_SCOPE)
SET(PACKAGE_VERSION_MAJOR 0 PARENT_SCOPE)
SET(PACKAGE_VERSION_MINOR 0 PARENT_SCOPE)
SET(PACKAGE_VERSION_BUGFIX 0 PARENT_SCOPE)
SET(PACKAGE_VERSION_NREV 0 PARENT_SCOPE)
SET(PACKAGE_VERSION_GID "0" PARENT_SCOPE)

IF (GIT_FOUND AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/.git")
        EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE}
            -C "${CMAKE_CURRENT_SOURCE_DIR}" describe --long --abbrev=6 HEAD OUTPUT_VARIABLE PACKAGE_VERSION)

        # Figure out version components
        STRING (REPLACE "\n" "" PACKAGE_VERSION  ${PACKAGE_VERSION})
        SET(PACKAGE_VERSION ${PACKAGE_VERSION} PARENT_SCOPE)
        MESSAGE(STATUS "Version is ${PACKAGE_VERSION}")

        # replace in this order to get a valid cmake list
        STRING (REPLACE "-g" "-" T_VERSION ${PACKAGE_VERSION})
        STRING (REPLACE "-" "." T_VERSION  ${T_VERSION})
        STRING (REPLACE "." ";" T_VERSION  ${T_VERSION})

        LIST(LENGTH T_VERSION L_LEN)

        IF(${L_LEN} GREATER 0)
            LIST(GET T_VERSION 0 PACKAGE_VERSION_MAJOR)
            SET(PACKAGE_VERSION_MAJOR ${PACKAGE_VERSION_MAJOR} PARENT_SCOPE)
            MESSAGE(STATUS "PACKAGE_VERSION_MAJOR: ${PACKAGE_VERSION_MAJOR}")
        ENDIF()

        IF(${L_LEN} GREATER 1)
            LIST(GET T_VERSION 1 PACKAGE_VERSION_MINOR)
            SET(PACKAGE_VERSION_MINOR ${PACKAGE_VERSION_MINOR} PARENT_SCOPE)
            MESSAGE(STATUS "PACKAGE_VERSION_MINOR: ${PACKAGE_VERSION_MINOR}")
        ENDIF()

        IF(${L_LEN} GREATER 2)
            LIST(GET T_VERSION 2 PACKAGE_VERSION_BUGFIX)
            SET(PACKAGE_VERSION_BUGFIX ${PACKAGE_VERSION_BUGFIX} PARENT_SCOPE)
            MESSAGE(STATUS "PACKAGE_VERSION_BUGFIX: ${PACKAGE_VERSION_BUGFIX}")
        ENDIF()

        IF(${L_LEN} GREATER 3)
            LIST(GET T_VERSION 3 PACKAGE_VERSION_NREV)
            SET(PACKAGE_VERSION_NREV ${PACKAGE_VERSION_NREV} PARENT_SCOPE)
            MESSAGE(STATUS "PACKAGE_VERSION_NREV: ${PACKAGE_VERSION_NREV}")
        ENDIF()

        IF(${L_LEN} GREATER 4)
            LIST(GET T_VERSION 4 PACKAGE_VERSION_GID)
            SET(PACKAGE_VERSION_GID ${PACKAGE_VERSION_GID} PARENT_SCOPE)
            MESSAGE(STATUS "PACKAGE_VERSION_GID: ${PACKAGE_VERSION_GID}")
        ENDIF()
ENDIF()

ENDFUNCTION (GetAndParseVersion)